First of all let's take some "ax+b" samples and see the corresponding "q" values:

x + 3 => 0,1,2,3,...
2x + 1 => 1,3,5,7,...
3x + 2 => 2,5,8,11,...
5x     => 0,5,10,15,..

Now let's define a one dimensional array to hold the "q" values:

int end = 100000;
int[] nums = new int[end + 1];

Now for each "+" operation we find the starting point and then increment the related values like this:

int start = b % a;
for (int i = start; i <= end; i += a){
    nums[i]++;
}

And for each "-" operation we decrement them:

int start = b % a;              
for (int i = start; i <= end; i += a){
    nums[i]--;
}

For "?" query we directly return the nums[q] value.

When I subimitted this solution it got accepted but times were in the border so I didn't think it will be accepted in the full 
tests(surprisingly it did) and tried to optimize it.

Next observation was to notice whatever the value of b in a type of equation of x + b all values in nums array are incremented 
for "+" operation and decremented for "-" operation. So we do not need the for loops above, instead we can hold the values in a variable if a is 1 and then for each "?" query we add that number to the nums[q].

Then I saw that this can be generalized for each "ax+b". Let's examine "2x + b" for example:

2x => 0,2,4,6,...
2x+1 => 1,3,5,7,...
2x+2 => 0,2,4,6,...


Now we see that "q" values repeat for "b mod a" so we can define a two dimensional array whose first dimension holds the "a" and 
second dimension holds the "b mod a" in the equation of ax+b:

int size = 100;
int[,] k = new int[size, size];

For each "+" operation:

if (a <= size){                    
    k[a - 1, b % a]++;    
}

For each "-" operation:

if (a <= size){
    k[a - 1, b % a]--;
}

And for "?" operation we add the corresponding value to the nums[q]:

int result = nums[q];
for (int i = 0; i < size; i++){
    result += k[i, q % (i + 1)];
}

Btw, I found the optimum size variable to be 100, slowest one is 0.14s / 3s in C#.

For the complete code, please check DynamicLineIntersection.cs
